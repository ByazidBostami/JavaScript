In JavaScript, `let`, `var`, and `const` are used for variable declaration, but they have different characteristics and scopes. Here's a detailed comparison:

### 1. `var`
- **Scope**: Function-scoped. This means that if a variable is declared using `var` inside a function, it is accessible throughout the function. However, if declared outside a function, it is globally scoped.
- **Hoisting**: Variables declared with `var` are hoisted to the top of their scope and initialized with `undefined`.
- **Re-declaration**: Variables declared with `var` can be re-declared within the same scope without causing an error.

Example:
```javascript
function exampleVar() {
    if (true) {
        var x = 10;
    }
    console.log(x); // 10
}

exampleVar();

var y = 5;
var y = 6; // No error, y is now 6
```

### 2. `let`
- **Scope**: Block-scoped. This means that if a variable is declared using `let` inside a block (e.g., inside `{}`), it is only accessible within that block.
- **Hoisting**: Variables declared with `let` are hoisted but not initialized. Accessing them before declaration results in a `ReferenceError`.
- **Re-declaration**: Variables declared with `let` cannot be re-declared within the same block scope.

Example:
```javascript
function exampleLet() {
    if (true) {
        let x = 10;
        console.log(x); // 10
    }
    // console.log(x); // ReferenceError: x is not defined
}

exampleLet();

let y = 5;
// let y = 6; // SyntaxError: Identifier 'y' has already been declared
```

### 3. `const`
- **Scope**: Block-scoped, similar to `let`.
- **Hoisting**: Variables declared with `const` are hoisted but not initialized. Accessing them before declaration results in a `ReferenceError`.
- **Re-declaration and Assignment**: Variables declared with `const` cannot be re-declared or re-assigned. However, if the variable is an object or array, the contents of the object or array can be modified.

Example:
```javascript
function exampleConst() {
    if (true) {
        const x = 10;
        console.log(x); // 10
    }
    // console.log(x); // ReferenceError: x is not defined
}

exampleConst();

const y = 5;
// y = 6; // TypeError: Assignment to constant variable

const z = { value: 10 };
z.value = 20; // This is allowed
console.log(z.value); // 20
```

### Summary:
- **`var`**: Function-scoped, hoisted and initialized with `undefined`, can be re-declared.
- **`let`**: Block-scoped, hoisted but not initialized, cannot be re-declared.
- **`const`**: Block-scoped, hoisted but not initialized, cannot be re-declared or re-assigned (except for mutable objects).

Choosing between `let` and `const` is generally preferred over `var` due to their predictable scoping and the fact that they avoid some of the pitfalls associated with `var`. Use `const` by default unless you know the variable's value needs to be reassigned, in which case use `let`.